{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","state","query","filteredBy","handleChange","event","target","name","value","setState","filterByStatus","todo","completed","filterByQuery","title","toLocaleLowerCase","includes","this","props","todos","selectedUser","checkTodo","todoCheck","preparedTodos","filter","className","placeholder","type","onChange","map","key","id","classNames","checked","userId","onClick","selectUser","React","Component","CurrentUser","user","gettingId","prevProps","fetch","then","response","json","result","data","email","phone","removeUser","App","selectedUserId","todoId","foundTodo","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39d1e1a1.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    query: '',\n    filteredBy: '',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  filterByStatus = (todo) => {\n    switch (this.state.filteredBy) {\n      case 'completed':\n        return todo.completed === true;\n      case 'active':\n        return todo.completed === false;\n      default:\n        return todo;\n    }\n  }\n\n  filterByQuery = todo => (\n    todo.title.toLocaleLowerCase()\n      .includes(this.state.query.toLocaleLowerCase())\n  );\n\n  render() {\n    const { todos, selectedUser, todoCheck: checkTodo } = this.props;\n\n    const preparedTodos = todos.filter(this.filterByQuery)\n      .filter(this.filterByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          placeholder=\"search todo\"\n          type=\"text\"\n          onChange={(event) => {\n            this.setState({\n              query: event.target.value.toLocaleLowerCase(),\n            });\n          }}\n        />\n        <select\n          name=\"filteredBy\"\n          value={this.state.filteredBy}\n          onChange={this.handleChange}\n        >\n\n          <option value=\"all\">\n            all todos\n          </option>\n\n          <option value=\"active\">\n            active\n          </option>\n\n          <option value=\"completed\">\n            completed\n          </option>\n\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(`TodoList__item`, {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    name=\"done\"\n                    checked={todo.completed}\n                    onChange={() => checkTodo(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    // eslint-disable-next-line max-len\n                    { 'TodoList__user-button--selected': todo.userId === selectedUser },\n                  )}\n                  type=\"button\"\n                  onClick={() => {\n                    this.props.selectUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    userId: PropTypes.number.isRequired,\n    completed: PropTypes.bool,\n  })).isRequired,\n  selectedUser: PropTypes.number.isRequired,\n  selectUser: PropTypes.func.isRequired,\n  todoCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUserById } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.gettingId();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.gettingId();\n    }\n  }\n\n  async gettingId() {\n    const user = await getUserById(this.props.userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    if (!this.state.user) {\n      return <span>Loading ...</span>;\n    }\n\n    const { name, email, phone, id } = this.state.user;\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">{name}</h3>\n          <p className=\"CurrentUser__email\">{email}</p>\n          <p className=\"CurrentUser__phone\">{phone}</p>\n        </div>\n\n        <button\n          type=\"button\"\n          onClick={this.props.removeUser}\n          className=\"button\"\n        >\n          clear\n        </button>\n      </>\n\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  removeUser: PropTypes.func.isRequired,\n};\n","const TODOS_URL = `https://mate-api.herokuapp.com/todos`;\nconst USER_URL = `https://mate-api.herokuapp.com/users/`;\n\nexport function getTodos() {\n  return fetch(TODOS_URL)\n    .then(response => response.json());\n}\n\nexport function getUserById(id) {\n  return fetch(`${USER_URL}${id}`)\n    .then(response => response.json())\n    .then(result => result.data);\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos().then(result => (\n      this.setState({\n        todos: result.data.filter(todo => todo.userId),\n      })\n    ));\n  }\n\n  checkTodo = (todoId) => {\n    const foundTodo = this.state.todos.find(todo => todo.id === todoId);\n\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === foundTodo.id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={userId => this.setState({ selectedUserId: userId })}\n            selectedUser={selectedUserId}\n            todoCheck={this.checkTodo}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                removeUser={() => {\n                  this.setState({ selectedUserId: 0 });\n                }}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}